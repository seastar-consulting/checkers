name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.4'

    - name: Create Release Tag
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}

    - name: Build Release Binaries
      run: make release VERSION=${{ github.event.inputs.version }}

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        draft: false
        prerelease: false
        files: |
          bin/checkers-linux-amd64
          bin/checkers-linux-arm64
          bin/checkers-windows-amd64.exe
          bin/checkers-windows-arm64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload macOS binaries
      uses: actions/upload-artifact@v3
      with:
        name: macos-binaries
        path: |
          bin/checkers-darwin-amd64
          bin/checkers-darwin-arm64

  sign-macos:
    needs: build
    runs-on: macos-latest
    
    steps:
    - name: Download macOS binaries
      uses: actions/download-artifact@v3
      with:
        name: macos-binaries
        path: bin

    - name: Import Apple Developer Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    - name: Sign macOS Binaries
      env:
        APPLE_IDENTITY: ${{ vars.APPLE_IDENTITY }}
      run: |
        # List available identities for debugging
        security find-identity -v -p codesigning
        
        # Sign with hardened runtime and timestamp
        codesign --force -s "$APPLE_IDENTITY" --options runtime --timestamp --verbose bin/checkers-darwin-amd64
        codesign --force -s "$APPLE_IDENTITY" --options runtime --timestamp --verbose bin/checkers-darwin-arm64
        
        # Verify signatures
        codesign -vv --deep --strict bin/checkers-darwin-amd64
        codesign -vv --deep --strict bin/checkers-darwin-arm64

    - name: Create DMGs for Notarization
      env:
        APPLE_IDENTITY: ${{ vars.APPLE_IDENTITY }}
      run: |
        # List available identities for debugging
        security find-identity -v -p codesigning
        
        for arch in amd64 arm64; do
          echo "Creating DMG for $arch..."
          
          # Create a temporary directory for DMG contents
          mkdir -p "tmp-$arch/usr/local/bin"
          cp "bin/checkers-darwin-$arch" "tmp-$arch/usr/local/bin/checkers"
          
          # Set executable permissions
          chmod +x "tmp-$arch/usr/local/bin/checkers"
          
          # Create DMG
          hdiutil create -volname "Checkers CLI" -srcfolder "tmp-$arch" -ov -format UDZO "bin/checkers-darwin-$arch.dmg"
          
          # Sign the DMG with hardened runtime and timestamp
          codesign --force -s "$APPLE_IDENTITY" --options runtime --timestamp --verbose "bin/checkers-darwin-$arch.dmg"
          
          # Verify DMG signature
          codesign -vv --deep --strict "bin/checkers-darwin-$arch.dmg"
        done

    - name: Notarize DMGs
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
      run: |
        for arch in amd64 arm64; do
          echo "Notarizing checkers-darwin-$arch.dmg..."
          
          # Submit for notarization and capture the submission ID
          SUBMISSION_ID=$(xcrun notarytool submit "bin/checkers-darwin-$arch.dmg" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait)
          
          # Get detailed info about the submission
          xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID"
          
          # Get submission log for debugging
          xcrun notarytool log "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID"
          
          # Only try to staple if notarization succeeded
          if xcrun notarytool info "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" | grep -q "status: Accepted"; then
            echo "Notarization successful, stapling ticket..."
            xcrun stapler staple "bin/checkers-darwin-$arch.dmg"
          else
            echo "Notarization failed, skipping stapling"
            exit 1
          fi
        done

    - name: Upload Signed and Notarized DMGs to Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        files: |
          bin/checkers-darwin-amd64.dmg
          bin/checkers-darwin-arm64.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

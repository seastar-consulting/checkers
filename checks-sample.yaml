---
checks:
  # OS Checks
  - name: "Check binaries installed: {{ .name }}"
    type: "os.executable_exists"
    items:
      - name: "go"
      - name: "docker"

  - name: "Check if necessary files exist: {{ .path }}"
    type: "os.file_exists"
    items:
      - path: "Makefile"
      - path: ".env"

  # Kubernetes Checks
  - name: "Verify access to default namespace"
    type: "k8s.namespace_access"
    parameters:
      namespace: "default"

  # AWS Cloud Checks
  - name: "Verify AWS Authentication"
    type: "cloud.aws_authentication"
    parameters:
      identity: "arn:aws:iam::123456789012:user/your-username"

  - name: "Check S3 Bucket Access"
    type: "cloud.aws_s3_access"
    parameters:
      bucket: "my-test-bucket"

  # Command Checks
  - name: "Network Connectivity"
    type: "command"
    command: |
      if ping -c 1 google.com > /dev/null; then
        echo '{
          "status": "success",
          "output": "Internet connectivity is working"
        }'
      else
        echo '{
          "status": "failure",
          "output": "No internet connectivity"
        }'
      fi

  - name: "Docker Status"
    type: "command"
    command: |
      if docker info > /dev/null 2>&1; then
        echo '{
          "status": "success",
          "output": "Docker is running"
        }'
      else
        echo '{
          "status": "failure",
          "output": "Docker is not running"
        }'
      fi

  # Example of a check that always fails (for testing)
  - name: "Always Fails"
    type: "command"
    command: |
      echo '{"status": "failure", "output": "This check is designed to fail"}'
